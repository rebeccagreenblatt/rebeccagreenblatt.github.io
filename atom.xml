<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rebecca Greenblatt]]></title>
  <link href="http://rebeccagreenblatt.github.io/atom.xml" rel="self"/>
  <link href="http://rebeccagreenblatt.github.io/"/>
  <updated>2014-07-21T23:17:11-04:00</updated>
  <id>http://rebeccagreenblatt.github.io/</id>
  <author>
    <name><![CDATA[Rebecca Greenblatt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript: Object Orientation]]></title>
    <link href="http://rebeccagreenblatt.github.io/blog/2014/07/21/javascript-some-of-the-confusing-stuff/"/>
    <updated>2014-07-21T19:24:18-04:00</updated>
    <id>http://rebeccagreenblatt.github.io/blog/2014/07/21/javascript-some-of-the-confusing-stuff</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to use this post to go through some of the things I find counterintuitive about Javascript&rsquo;s Object Orientated design. Note: I pretty much just took Jon Grover&rsquo;s slides and turned them into a blog post.</p>

<p>I&rsquo;ll start with the fact that constructors are just functions. And if prototypes are just functions, then why do I need to use &ldquo;new&rdquo; before instantiating a new instance?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> <span class="c1">// &quot;Rebecca&quot;</span>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">favorite_color</span><span class="p">;</span> <span class="c1">// &quot;blue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From my understanding, the &ldquo;new&rdquo; tells us where to fill in the &ldquo;this&rdquo; references made in the constructor and also places the parent first in the prototype chain. So if I call a method on rebecca that has not been specified, the next place it will look is the Person constructor. This is why I am able to call both rebecca.name and rebecca.favorite_color, even though I did not specifically set rebecca&rsquo;s favorite color.</p>

<p>Ok, next: what is the deal with private versus public methods? Let&rsquo;s say I wanted to add a method to the Person prototype&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">greeting</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Nice to meet you&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">greeting</span><span class="p">();</span> <span class="c1">//TypeError: undefined is not a function</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would not be able to call rebecca.greeting(); because this method would not be accessible to instances of Person. However, if we wrote it the following way, creating an instance method of &lsquo;this.greet,&rsquo; we could call greeting inside the constructor, and then it would be accessible by instances of Person through the instance method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">greeting</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Nice to meet you&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">greeting</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">// &quot;Nice to meet you&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way we could have done this without completely redefining the Person constructor, would be to stick with our original constructor, and add functionality for all of its instances by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s2">&quot;Nice to meet you&quot;</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then we would have been able to call rebecca.greet with no problem. I think about it as going inside the Person constructor, and then substituting prototype.greet with this.greet.</p>

<p>One last oddity appears when dealing with the scope of &ldquo;this&rdquo; inside functions in a constructor. As an example, this would come into play if we wanted to incorporate the name of the instance in the greet method, and have rebecca.greet(); return &ldquo;Nice to meet you. My name is Rebecca.&rdquo; The following could would NOT work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">greeting</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Nice to meet you. My name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">greeting</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">//&quot;Nice to meet you. My name is .&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem here is that once we enter the greeting function, the scope of this is no longer an instance of the Person constructor. Somehow we need to capture the scope of &ldquo;this&rdquo; before we enter the function&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">greeting</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Nice to meet you. My name is &quot;</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">greeting</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">//&quot;Nice to meet you. My name is Rebecca.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method takes advantage of javascript&rsquo;s unique scoping properties. This would also work!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">favorite_color</span> <span class="o">=</span> <span class="s2">&quot;blue&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s2">&quot;Nice to meet you. My name is &quot;</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rebecca</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Rebecca&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rebecca</span><span class="p">.</span><span class="nx">greet</span><span class="p">();</span> <span class="c1">//&quot;Nice to meet you. My name is Rebecca.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this post helped clear some things up about Javascript&rsquo;s prototype-based design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithms]]></title>
    <link href="http://rebeccagreenblatt.github.io/blog/2014/07/08/sorting-algorithms/"/>
    <updated>2014-07-08T20:33:08-04:00</updated>
    <id>http://rebeccagreenblatt.github.io/blog/2014/07/08/sorting-algorithms</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL for Rubyists]]></title>
    <link href="http://rebeccagreenblatt.github.io/blog/2014/06/20/sql-for-rubyists/"/>
    <updated>2014-06-20T14:28:32-04:00</updated>
    <id>http://rebeccagreenblatt.github.io/blog/2014/06/20/sql-for-rubyists</id>
    <content type="html"><![CDATA[<p>SQL is a great tool, but for us Rubyists, it can sometimes be hard to grasp the concepts of querying a database. I&rsquo;ve decided to re-write a couple of SQL queries in Ruby to remind myself of how the rows in a table correspond to an Object and its attributes.</p>

<p>For this example, we&rsquo;ll be modeling a crowdfunding website; we have pledges, projects, and users.</p>

<ul>
<li>a User has a name</li>
<li>a Project has a title, category, and funding goal</li>
<li>a Pledge has an amount and belongs to both a user and a project</li>
</ul>


<p>If we were to imagine the database, each of these objects would have its own table.</p>

<ul>
<li>the &lsquo;users&rsquo; table would have an &lsquo;id&rsquo; and &lsquo;name&rsquo; column</li>
<li>the &lsquo;projects&rsquo; table would have an &lsquo;id,&rsquo; &lsquo;title,&rsquo; &lsquo;category&rsquo; and &lsquo;funding goal&rsquo; column</li>
<li>the &lsquo;pledges&rsquo; table would have an &lsquo;id&rsquo;, &lsquo;user_id&rsquo;, and &lsquo;project_id&rsquo; column</li>
</ul>


<p>For our Ruby &ldquo;queries&rdquo; I&rsquo;ve created an Object Class for User, Project, and Pledge with these same column headers as attributes for their respective classes.</p>

<p>Now we are ready to start our queries! I will be writing my Ruby methods so that their output is identical to the SQLite output we would get if we ran the equivalent query in SQL.</p>

<p><strong>Select the title of all projects and the total amount they have raised</strong></p>

<p>SQL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT projects.title, SUM(pledges.amount)
</span><span class='line'>FROM projects JOIN pledges ON pledges.project_id = projects.id
</span><span class='line'>GROUP BY projects.title</span></code></pre></td></tr></table></div></figure>


<p>Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">projects</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="o">|</span> <span class="c1">##GROUP BY</span>
</span><span class='line'>  <span class="n">raised</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">pledges</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pledge</span><span class="o">|</span> <span class="c1">##JOIN</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pledge</span><span class="o">.</span><span class="n">project_id</span> <span class="o">==</span> <span class="n">project</span><span class="o">.</span><span class="n">id</span> <span class="c1">##ON</span>
</span><span class='line'>      <span class="n">raised</span> <span class="o">+=</span> <span class="n">pledge</span><span class="o">.</span><span class="n">amount</span> <span class="c1">##SUM</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[</span><span class="n">project</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">raised</span><span class="o">]</span> <span class="c1">##SELECT</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OUTPUT</strong>:
[[&ldquo;World&rsquo;s Best Book&rdquo;, 300], [&ldquo;World&rsquo;s Worst Book&rdquo;, 700], [&ldquo;Save The Whales&rdquo;, 1100], [&ldquo;Save The Rhinos&rdquo;, 500], [&ldquo;Save The Fish&rdquo;, 1000], [&ldquo;World&rsquo;s Best Album&rdquo;, 800], [&ldquo;World&rsquo;s Worst Album&rdquo;, 600]]</p>

<p><strong>Select the title of all projects that have met their funding goal</strong></p>

<p>SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="n">projects</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="no">FROM</span> <span class="n">projects</span> <span class="no">JOIN</span> <span class="n">pledges</span> <span class="no">ON</span> <span class="n">pledges</span><span class="o">.</span><span class="n">project_id</span> <span class="o">=</span> <span class="n">projects</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="no">GROUP</span> <span class="no">BY</span> <span class="n">projects</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="no">HAVING</span> <span class="no">SUM</span><span class="p">(</span><span class="n">pledges</span><span class="o">.</span><span class="n">amount</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">projects</span><span class="o">.</span><span class="n">funding_goal</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">projects</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="o">|</span> <span class="c1">##GROUP BY</span>
</span><span class='line'>  <span class="n">raised</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">pledges</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pledge</span><span class="o">|</span> <span class="c1">##JOIN</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pledge</span><span class="o">.</span><span class="n">project_id</span> <span class="o">==</span> <span class="n">project</span><span class="o">.</span><span class="n">id</span> <span class="c1">##ON</span>
</span><span class='line'>      <span class="n">raised</span> <span class="o">+=</span> <span class="n">pledge</span><span class="o">.</span><span class="n">amount</span> <span class="c1">##SUM</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">raised</span> <span class="o">&gt;</span> <span class="n">project</span><span class="o">.</span><span class="n">funding_goal</span> <span class="c1">##HAVING</span>
</span><span class='line'>    <span class="o">[</span><span class="n">project</span><span class="o">.</span><span class="n">title</span><span class="o">]</span> <span class="c1">##SELECT</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OUTPUT</strong>:
[[&ldquo;Save The Whales&rdquo;], [&ldquo;World&rsquo;s Best Album&rdquo;]]</p>

<p><strong>Select the names of all users and the total amount they have pledged</strong></p>

<p>SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="n">users</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="no">SUM</span><span class="p">(</span><span class="n">pledges</span><span class="o">.</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'><span class="no">FROM</span> <span class="n">users</span> <span class="no">JOIN</span> <span class="n">pledges</span> <span class="no">ON</span> <span class="n">pledges</span><span class="o">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="no">GROUP</span> <span class="no">BY</span> <span class="n">users</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="no">ORDER</span> <span class="no">BY</span> <span class="no">SUM</span><span class="p">(</span><span class="n">pledges</span><span class="o">.</span><span class="n">amount</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="c1">##GROUP BY</span>
</span><span class='line'>  <span class="n">pledged</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">pledges</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pledge</span><span class="o">|</span> <span class="c1">##JOIN</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pledge</span><span class="o">.</span><span class="n">user_id</span> <span class="o">==</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span> <span class="c1">##ON</span>
</span><span class='line'>      <span class="n">pledged</span> <span class="o">+=</span> <span class="n">pledge</span><span class="o">.</span><span class="n">amount</span> <span class="c1">##SUM</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">pledged</span><span class="o">]</span> <span class="c1">##SELECT</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">total_pledged</span><span class="o">|</span> <span class="n">total_pledged</span><span class="p">}</span> <span class="c1">##ORDER BY</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OUTPUT</strong>:
[[&ldquo;Matthew&rdquo;, 500], [&ldquo;Jonathan&rdquo;, 700], [&ldquo;Rebecca&rdquo;, 900], [&ldquo;Jordan&rdquo;, 1100], [&ldquo;Melissa&rdquo;, 1800]]</p>

<p><strong>Select the category name and the sum total of the pledge amounts of all the pledges in the book category</strong></p>

<p>SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="n">projects</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="no">SUM</span><span class="p">(</span><span class="n">pledges</span><span class="o">.</span><span class="n">amount</span><span class="p">)</span>
</span><span class='line'><span class="no">FROM</span> <span class="n">projects</span> <span class="no">JOIN</span> <span class="n">pledges</span> <span class="no">ON</span> <span class="n">projects</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">pledges</span><span class="o">.</span><span class="n">project_id</span>
</span><span class='line'><span class="no">WHERE</span> <span class="n">projects</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="s1">&#39;books&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">projects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">project</span><span class="o">.</span><span class="n">category</span> <span class="o">==</span> <span class="s2">&quot;books&quot;</span> <span class="c1">##WHERE</span>
</span><span class='line'>    <span class="n">pledges</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pledge</span><span class="o">|</span> <span class="c1">##JOIN</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pledge</span><span class="o">.</span><span class="n">project_id</span> <span class="o">==</span> <span class="n">project</span><span class="o">.</span><span class="n">id</span> <span class="c1">##ON</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">pledge</span><span class="o">.</span><span class="n">amount</span> <span class="c1">##SUM</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">[[</span><span class="s2">&quot;books&quot;</span><span class="p">,</span> <span class="n">total</span><span class="o">]]</span> <span class="c1">##SELECT</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OUTPUT</strong>:
[[&ldquo;books&rdquo;, 1800]]</p>

<p>Another, more sophisticated Object-oriented model would be one in which each object had an attribute that explained their relationship to the other. For example, each pledge instance would have a user attribute and a project attribute. Each user would have an array of pledges they have made, and each project would have an array of pledges that were made towards their funding goal.</p>

<p>I hope this post helped you see SQL queries in a new way!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post]]></title>
    <link href="http://rebeccagreenblatt.github.io/blog/2014/06/03/my-first-post/"/>
    <updated>2014-06-03T17:00:53-04:00</updated>
    <id>http://rebeccagreenblatt.github.io/blog/2014/06/03/my-first-post</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello, World&rdquo;</p>
]]></content>
  </entry>
  
</feed>
